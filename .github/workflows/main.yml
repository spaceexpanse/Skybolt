name: Build Skybolt
on: 
  push:
    branches:
#      - main
     - dev
     - '[0-9].[0-9].[0-9]+'
    tags:
#     - v*
     - build
     - 'v[0-9].[0-9].[0-9]+'
#    paths-ignore: [ 'Doc/**', 'Flights/**', 'Html/**', 'Images/**', 'Localdoc/**', 'Scenarios/**', 'Textures/**', 'Textures2/**']

  pull_request:
    branches:
#      - main
     - dev

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            python-arch: "x64"
            python-version: "3.6.x" 
            install-headerfiles: true
            prepare-python: true
            gcc-version: "9"

    runs-on: ${{ matrix.os }}
    env:
      buildDir: ${{github.workspace}}/build
      depsDir: ${{github.workspace}}/deps
    steps:
    - uses: actions/checkout@v2.4.0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.python-arch }}
      if: matrix.prepare-python
    - name: Install Linux packages
      run: sudo apt-get update && sudo apt-get install -y libgl-dev
      if: runner.os == 'Linux'
    - name: Install C and C++ header files
      run: |
        sudo apt-get update && sudo apt-get install -y gcc-multilib g++-multilib
      if: matrix.install-headerfiles
    - name: Install conan
      run: |
        python3 -m pip install --upgrade pip
        pip3 install conan
    - name: Enable C++11
      run: |
        conan profile new default --detect
        conan profile update settings.compiler.libcxx=libstdc++11 default
    - name: Conan install
      env:
        CONAN_SYSREQUIRES_MODE: enabled
      run: | 
        mkdir ${{env.depsDir}}
        cd ${{env.depsDir}}
        conan install ${{github.workspace}} --build=cxxtimer --build=px_sched --build=xsimd
    - name: Cmake build
      run: |
        mkdir ${{env.buildDir}}
        cd ${{env.buildDir}}
        cmake -DCMAKE_TOOLCHAIN_FILE=${{env.depsDir}}/conan_paths.cmake ${{github.workspace}}
        cmake --build .
    - name: Cmake test
      run: |
        cd ${{env.buildDir}}
        ctest
    - name: Pack
#      if: ${{ github.ref == 'refs/heads/main' }}
      working-directory: ${{ github.workspace }}/build
      shell: cmd
      run: '7z a "${{ github.workspace }}/build/skybolt-${{ matrix.os }}.zip" .'

    - name: Upload Build Artifact
#      if: ${{ github.ref == 'refs/heads/main' }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: Orbiter-${{ matrix.architecture }}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ github.workspace }}/build/skybolt-${{ matrix.os }}.zip
        retention-days: 60

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ github.ref_name }}.${{ github.run_number }}.a
        release_name: Skybolt ${{ github.ref_name }}.${{ github.run_number }}-${{ matrix.os }}
        draft: true
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ github.workspace }}/build/skybolt-${{ matrix.os }}.zip
        asset_name: skybolts-${{ matrix.os }}.zip
        asset_content_type: application/zip
         